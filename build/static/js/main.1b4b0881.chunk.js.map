{"version":3,"sources":["components/ContinentList.jsx","components/Intro.jsx","components/ContinentInfo.jsx","components/Continent.jsx","pages/Home.jsx","pages/Covid19.jsx","App.js","serviceWorker.js","index.js"],"names":["ContinentList","props","className","list","map","val","key","continent","country","population","Intro","message","ContinentInfo","Component","state","axios","method","url","headers","useQueryString","then","response","console","log","data","setState","catch","error","this","Home","path","component","Covid19","onContinentInput","e","target","value","type","placeholder","onChange","slice","time","cases","active","critical","recovered","new","deaths","total","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"0RA6BeA,EAxBO,SAACC,GAEnB,OACI,6BAEI,wBAAIC,UAAU,kBAEZD,EAAME,KAAKC,KAAI,SAACC,EAAKC,GAAN,OACb,yBAAKA,IAAKA,GAAK,0CAAiBD,EAAIE,WACpC,wCAAcF,EAAIG,SAClB,2CAAiBH,EAAII,mBCNtBC,EAPD,SAACT,GAAD,OACb,6BACO,sDACR,2BAAIA,EAAMU,WCkDKC,GC/CSC,Y,4MDJpBC,MAAQ,CACJP,UAAU,I,kEAGK,IAAD,OACpBQ,IAAM,CACLC,OAAQ,MACRC,IAAK,8CACLC,QAAS,CACR,eAAgB,2BAChB,kBAAmB,2BACnB,iBAAkB,qDAClBC,gBAAgB,KAGhBC,MAAK,SAACC,GACNC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAASG,KACtB,EAAKC,SAAS,CAAElB,UAAWiB,EAAKH,cAEhCK,OAAM,SAACC,GACPL,QAAQC,IAAII,Q,+BAKF,IAECpB,EAAaqB,KAAKd,MAAlBP,UAEP,OAAS,6BACL,iEAGIA,EAAUH,KAAI,SAACC,EAAKC,GAChB,OACI,6BACI,uCAAaD,EAAIE,oB,GAtCjBM,cESbgB,EAPF,SAAC5B,GAAD,OACZ,kBAAC,IAAD,KAEC,kBAAC,IAAD,CAAO6B,KAAK,sBAAsBC,UAAWnB,MC4FhCoB,G,wDAhGd,WAAY/B,GAAQ,IAAD,8BAClB,cAAMA,IA+BPgC,iBAAmB,SAAAC,GAClBnB,IAAM,CACLC,OAAQ,MACRC,IAAI,uDAAD,OAAyDiB,EAAEC,OAAOC,OACrElB,QAAS,CACR,eAAgB,2BAChB,kBAAmB,2BACnB,iBAAkB,qDAClBC,gBAAgB,KAGhBC,MAAK,SAACC,GACNC,QAAQC,IAAIF,GACZ,IAAMG,EAAOH,EAASG,KACtB,EAAKC,SAAS,CAAElB,UAAWiB,EAAKH,cAEhCK,OAAM,SAACC,GACPL,QAAQC,IAAII,OA/Cd,EAAKb,MAAQ,CACZP,UAAW,IAHM,E,qDAsDT,IAEFA,EAAaqB,KAAKd,MAAlBP,UAEP,OAAQ,6BACP,6BACA,wDAEA,yBAAKL,UAAU,aACf,6BAAK,2BAAOA,UAAU,QAAUmC,KAAK,OAAOC,YAAY,iCAAiCC,SAAUX,KAAKK,oBAAyB,6BACjI,yBAAK/B,UAAU,yBAGdK,EAAUiC,MAAM,EAAE,GAAGpC,KAAI,SAACC,EAAKC,GAC9B,OAAO,yBAAKA,IAAKA,GAChB,uDAA6BC,EAAU,GAAGkC,MAC1C,yCAAgBpC,EAAIE,WACV,uCAAaF,EAAIG,SACjB,0CAAgBH,EAAII,YAChC,qCACA,qCAAWF,EAAU,GAAGmC,MAAMC,QAC9B,wCAAcpC,EAAU,GAAGmC,MAAME,UACjC,yCAAerC,EAAU,GAAGmC,MAAMG,WAClC,yCAAetC,EAAU,GAAGmC,MAAMI,KAClC,sCACA,sCAAYvC,EAAU,GAAGwC,OAAOC,mB,GAhFdnC,cCmBPoC,E,uKAXb,OACC,6BACC,kBAAC,EAAD,MAEF,kBAAC,EAAD,W,GANgBpC,aCGEqC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,YCVNC,IAASC,OACP,kBAAC,IAAD,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBzC,MAAK,SAAA0C,GACJA,EAAaC,gBAEdrC,OAAM,SAAAC,GACLL,QAAQK,MAAMA,EAAMhB,c","file":"static/js/main.1b4b0881.chunk.js","sourcesContent":["import React from 'react';\nimport { Link } from 'react-router-dom';\n\n\n\nconst ContinentList = (props) => {\n    \n    return(\n        <div>\n           \n            <ul className='continent-list'>\n            \n             {props.list.map((val, key) =>\n                <div key={key}><li >Continent: {val.continent}</li>\n                <li>Country: {val.country}</li>\n                <li>Population: {val.population}</li>\n                \n                \n                </div>\n                \n                \n                )}\n            </ul>\n            \n\n            </div>\n    )\n}\n\nexport default ContinentList","import React from 'react';\n\nconst Intro = (props) => (\n\t<div>\n        <p>Covid19 information app</p>\n<p>{props.message}</p>\n    </div>\n)\n\nexport default Intro\n","import React, { Component } from 'react';\nimport axios from 'axios'\n\nclass ContinentInfo extends Component {\n    state = {\n        continent:[]\n    }\n\n  componentDidMount() {\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: 'https://covid-193.p.rapidapi.com/statistics',\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/octet-stream',\n\t\t\t\t'x-rapidapi-host': 'covid-193.p.rapidapi.com',\n\t\t\t\t'x-rapidapi-key': 'c1da975c94msh84d4bffd9d40d57p1c2788jsn6ecc2887a66d',\n\t\t\t\tuseQueryString: true\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tconst data = response.data;\n\t\t\t\tthis.setState({ continent: data.response });\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t}\n\n    \n    render() { \n\n        const {continent} = this.state\n        \n        return ( <div>\n            <h1>More information on the continent</h1>\n\n            {\n                continent.map((val, key) => {\n                    return(\n                        <div>\n                            <p>Country: {val.continent}</p>\n                        </div>\n                    )\n                })\n            }\n\n        </div> );\n    }\n}\n \n\n\n\n\nexport default ContinentInfo;","import React, { Component } from 'react';\nimport axios from 'axios';\nimport ContinentList from './ContinentList';\nimport Intro from './Intro';\nimport { Link } from 'react-router-dom';\n\n\n\nclass Continent extends Component {\n    state ={\n\t\tcontinent:[],\n\t\t\n\t}\n\n\t// componentDidMount() {\n\t// \taxios({\n\t// \t\tmethod: 'GET',\n\t// \t\turl: 'https://covid-193.p.rapidapi.com/statistics',\n\t// \t\theaders: {\n\t// \t\t\t'content-type': 'application/octet-stream',\n\t// \t\t\t'x-rapidapi-host': 'covid-193.p.rapidapi.com',\n\t// \t\t\t'x-rapidapi-key': 'c1da975c94msh84d4bffd9d40d57p1c2788jsn6ecc2887a66d',\n\t// \t\t\tuseQueryString: true\n\t// \t\t}\n\t// \t})\n\t// \t\t.then((response) => {\n\t// \t\t\tconsole.log(response);\n\t// \t\t\tconst data = response.data;\n\t// \t\t\tthis.setState({ continent: data.response });\n\t// \t\t})\n\t// \t\t.catch((error) => {\n\t// \t\t\tconsole.log(error);\n\t// \t\t});\n\t// }\n\n\tonContinentInput = e => {\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: `https://covid-193.p.rapidapi.com/statistics?country=${e.target.value}`,\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/octet-stream',\n\t\t\t\t'x-rapidapi-host': 'covid-193.p.rapidapi.com',\n\t\t\t\t'x-rapidapi-key': 'c1da975c94msh84d4bffd9d40d57p1c2788jsn6ecc2887a66d',\n\t\t\t\tuseQueryString: true\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tconst data = response.data;\n\t\t\t\tthis.setState({ continent: data.response , cases: data.response[0].cases});\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t\n\t}\n\n    render() { \n\n\t\tconst {continent} = this.state\n\n        return ( <div>The lenght of continent is = {this.state.continent.length}\n\t\t<div><Intro message='You can find latest covid19 info here.'/></div>\n\t\t<div>\n\t\t\t<input type='text' onChange={this.onContinentInput}/>\n\t\t</div>\n\t\t<ContinentList list={continent}/>\n\t\t</div> );\n    }\n}\n \nexport default Continent;","import React, { Component } from 'react';\nimport { Switch, Route } from 'react-router-dom';\nimport Continent from '../components/Continent';\nimport ContinentInfo from '../components/ContinentInfo';\n\nconst Home = (props) => (\n\t<Switch>\n\t\t{/* <Route exact path='/' component={Continent}/> */}\n\t\t<Route path=\"/statistics?country\" component={ContinentInfo} />\n\t</Switch>\n);\n\nexport default Home;\n","import React, { Component } from 'react';\nimport axios from 'axios';\n\nclass Covid19 extends Component {\n\tconstructor(props) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\tcontinent: [],\n\t\t\t// cases:[],\n\t\t\t// deaths:[],\n\t\t\t// time:''\n\t\t};\n\t}\n\n\t// componentDidMount() {\n\t// \taxios({\n\t// \t\tmethod: 'GET',\n\t// \t\turl: 'https://covid-193.p.rapidapi.com/statistics',\n\t// \t\theaders: {\n\t// \t\t\t'content-type': 'application/octet-stream',\n\t// \t\t\t'x-rapidapi-host': 'covid-193.p.rapidapi.com',\n\t// \t\t\t'x-rapidapi-key': 'c1da975c94msh84d4bffd9d40d57p1c2788jsn6ecc2887a66d',\n\t// \t\t\tuseQueryString: true\n\t// \t\t}\n\t// \t})\n\t// \t\t.then((response) => {\n\t// \t\t\tconsole.log(response);\n\t// \t\t\tconst data = response.data;\n\t// \t\t\tthis.setState({ continent: data.response , cases: data.response[0].cases, deaths:data.response[0].deaths, time:data.response[0].time});\n\t// \t\t})\n\t// \t\t.catch((error) => {\n\t// \t\t\tconsole.log(error);\n\t// \t\t});\n\t// }\n\n\n\tonContinentInput = e => {\n\t\taxios({\n\t\t\tmethod: 'GET',\n\t\t\turl: `https://covid-193.p.rapidapi.com/statistics?country=${e.target.value}`,\n\t\t\theaders: {\n\t\t\t\t'content-type': 'application/octet-stream',\n\t\t\t\t'x-rapidapi-host': 'covid-193.p.rapidapi.com',\n\t\t\t\t'x-rapidapi-key': 'c1da975c94msh84d4bffd9d40d57p1c2788jsn6ecc2887a66d',\n\t\t\t\tuseQueryString: true\n\t\t\t}\n\t\t})\n\t\t\t.then((response) => {\n\t\t\t\tconsole.log(response);\n\t\t\t\tconst data = response.data;\n\t\t\t\tthis.setState({ continent: data.response });\n\t\t\t})\n\t\t\t.catch((error) => {\n\t\t\t\tconsole.log(error);\n\t\t\t});\n\t\t\n\t}\n\n\trender() {\n\n\t\tconst {continent} = this.state\n\t\t\n\t\treturn (<div>\n\t\t\t<div>\n\t\t\t<h1>Covid19 Information Page</h1>\n\t\t\t\n\t\t\t<div className='container'>\n\t\t\t<div><input className='input'   type='text' placeholder='please enter your country here' onChange={this.onContinentInput}/></div><br/>\n\t\t\t<div className='container_information'>\n\n\t\t\t{\n\t\t\t\tcontinent.slice(0,1).map((val, key) => {\n\t\t\t\t\treturn <div key={key}>\n\t\t\t\t\t\t<h3>This information as at: {continent[0].time}</h3>\n\t\t\t\t\t\t<p >Continent: {val.continent}</p>\n                <p>Country: {val.country}</p>\n                <p>Population: {val.population}</p>\n\t\t\t\t<h3>CASES</h3>\n\t\t\t\t<p>Cases: {continent[0].cases.active}</p>\n\t\t\t\t<p>Critical: {continent[0].cases.critical}</p>\n\t\t\t\t<p>Recovered: {continent[0].cases.recovered}</p>\n\t\t\t\t<p>New Cases: {continent[0].cases.new}</p>\n\t\t\t\t<h3>DEATHS</h3>\n\t\t\t\t<p>Deaths: {continent[0].deaths.total}</p>\n\t\t\t\t\n\t\t\t\t\t\t\n\t\t\t\t\t\t</div>\n\t\t\t\t})\n\t\t\t\t\n\t\t\t}\n\t\t\t</div>\n\n\t\t\t</div>\n\t\t\t\n\t\t\t\n\t\t\t</div>\n\t\t</div>)\n\t}\n}\n\nexport default Covid19;\n","import React, { Component } from 'react';\nimport { BrowserRouter as Router, Switch, Route } from 'react-router-dom';\nimport Home from './pages/Home';\nimport './assets/css/style.css';\nimport Covid19 from './pages/Covid19';\nimport Continent from './components/Continent';\nimport ContinentInfo from './components/ContinentInfo';\n\n\nclass App extends Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<Home/>\n\t\t{/* <ContinentInfo/> */}\n\t\t<Covid19/>\n\t\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { BrowserRouter } from 'react-router-dom';\n\n\nReactDOM.render(\n  <BrowserRouter>\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}